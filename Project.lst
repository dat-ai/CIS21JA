Microsoft (R) Macro Assembler Version 14.00.24210.0	    11/23/16 00:18:41
Module 7 Exercis					     Page 1 - 1


				TITLE Module 7 Exercise

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000 F123				num1			WORD	0F123h
 00000002 E456				num2			WORD	0E456h

 00000004 45 6E 74 65 72		first_prompt	BYTE	"Enter a first hex number:",0
	   20 61 20 66 69
	   72 73 74 20 68
	   65 78 20 6E 75
	   6D 62 65 72 3A
	   00
 0000001E 45 6E 74 65 72		second_prompt	BYTE	"Enter a second hex number:",0
	   20 61 20 73 65
	   63 6F 6E 64 20
	   68 65 78 20 6E
	   75 6D 62 65 72
	   3A 00
 00000039 57 6F 75 6C 64		continue		BYTE	"Would you like to continue? (y): ", 0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 63 6F
	   6E 74 69 6E 75
	   65 3F 20 28 79
	   29 3A 20 00
 0000005B 54 68 65 20 73		sum_prompt		BYTE	"The sum result is: ",0
	   75 6D 20 72 65
	   73 75 6C 74 20
	   69 73 3A 20 00
 0000006F 00 00 00 00 00		result			BYTE	?,?,?,?,0
 00000074 49 6E 76 61 6C		invalid_result	BYTE	"Invalid result. [ Overflow detected. Result is greater than signed 16-bit]", 0
	   69 64 20 72 65
	   73 75 6C 74 2E
	   20 5B 20 4F 76
	   65 72 66 6C 6F
	   77 20 64 65 74
	   65 63 74 65 64
	   2E 20 52 65 73
	   75 6C 74 20 69
	   73 20 67 72 65
	   61 74 65 72 20
	   74 68 61 6E 20
	   73 69 67 6E 65
	   64 20 31 36 2D
	   62 69 74 5D 00
 000000BF 00000004 R			prompt			DWORD    OFFSET first_prompt, OFFSET second_prompt
	   0000001E R
 00000000			.code

 00000000			main PROC

 00000000			mainLoop:
				;GetInput Procedure -------------- Pass by Reference
 00000000  68 000000BF R		push	OFFSET prompt		; address of prompt
 00000005  68 00000000 R		push	OFFSET num1			; address of num1
 0000000A  68 00000002 R		push	OFFSET num2			; address of num2
 0000000F  E8 00000088			call	getInput

				;Add Procedure ------------------- Pass by Value
 00000014  0F B7 05			movzx	eax, num1
	   00000000 R
 0000001B  50				push	eax
 0000001C  0F B7 05			movzx	eax, num2
	   00000002 R
 00000023  50				push	eax
 00000024  E8 000000AA			call	addInput	
								
 00000029  F6 C1 01			test	cl, 1
 0000002C  75 26			jnz		InvalidResult

 0000002E			ValidResult:
 0000002E  50				push	eax						; pass the sum result to stack by value
 0000002F  68 0000006F R		push	OFFSET result			; pass by reference
													; convert Procedure 
 00000034  E8 000000B8			call	convertHexString	

 00000039  BA 0000005B R		mov		edx, OFFSET sum_prompt	; Display the result
 0000003E  E8 00000000 E		call	writeString
 00000043  BA 0000006F R		mov		edx, OFFSET result
 00000048  E8 00000000 E		call	writeString

 0000004D  E8 00000000 E		call	crlf
 00000052  EB 0F			jmp		AskContinue

 00000054			InvalidResult:
 00000054  BA 00000074 R		mov		edx, OFFSET invalid_result
 00000059  E8 00000000 E		call	writeString
 0000005E  E8 00000000 E		call	crlf

 00000063			AskContinue:
 00000063  BA 00000039 R		mov		edx, OFFSET continue		
 00000068  E8 00000000 E		call	writeString
 0000006D  E8 00000000 E		call	readChar					
 00000072  E8 00000000 E		call	writeChar					; echo user input
 00000077  E8 00000000 E		call	crlf
 0000007C  E8 00000000 E		call	crlf
 00000081  B2 79			mov		dl, 'y'						;if (al == 'y') or (al == 'Y')
 00000083  3A C2			cmp		al, dl
 00000085  0F 84 FFFFFF75		je		mainLoop
 0000008B  B2 59			mov		dl,'Y'
 0000008D  3A C2			cmp		al, dl
 0000008F  0F 84 FFFFFF6B		je		mainLoop


				exit
 00000095  6A 00	   *	    push   +000000000h
 00000097  E8 00000000 E   *	    call   ExitProcess
 0000009C			main ENDP


				;------------GET INPUT PROCEDURE --------------------
 0000009C			getInput PROC
				;	Get user input and store into data num1 and num2
				;		Input: addr(inputstring), addr(num1), addr(num2)
				;		Ouput: nothing
				;----------------------------------------------------
 0000009C  55				push	ebp
 0000009D  8B EC			mov		ebp, esp
 0000009F  50				push	eax
 000000A0  53				push	ebx
 000000A1  51				push	ecx
 000000A2  52				push	edx

 000000A3  B9 00000000			mov		ecx, 0
 000000A8			DISPLAY:
 000000A8  83 F9 02			cmp		ecx, 2
 000000AB  74 1E			je		FINISHED

 000000AD  8B 45 10			mov		eax, [ebp+16]					; save address of inputstring to edx 
 000000B0  8D 04 88			lea		eax, [eax + ecx*4]				; dereference [edx]
 000000B3  8B 10			mov		edx, [eax]						
 000000B5  E8 00000000 E		call	writeString						
 000000BA  E8 00000000 E		call	readHex							; store hex input in AX
															; There is no validation here since input is guranteed to be a hex value within 16 bits

 000000BF  8B 55 0C			mov		edx, [ebp+12]					; 
 000000C2  8D 14 4A			lea		edx, [edx + ecx*2]				; 
 000000C5  66| 89 02			mov		WORD PTR [edx], ax				; dereference [edx]

 000000C8  41				inc		ecx
 000000C9  EB DD			jmp		DISPLAY

 000000CB			FINISHED:
 000000CB  5A				pop		edx
 000000CC  59				pop		ecx
 000000CD  5B				pop		ebx
 000000CE  58				pop		eax
 000000CF  5D				pop		ebp
 000000D0  C2 000C			ret		12
 000000D3			getInput ENDP

				;----------------------ADD PROCEDURE ----------------------------
 000000D3			addInput PROC
				;	add two user input number
				;		Input: value num1, value num2
				;		Ouput: eax : sum value
				;			   cx  : flag for calculation (1 means invalid sumation)
				;-------------------------------------------------------------------
 000000D3  55				push	ebp
 000000D4  8B EC			mov		ebp, esp
 000000D6  53				push	ebx
 000000D7  52				push	edx

 000000D8  66| 8B 45 08			mov		ax, [ebp+8]
 000000DC  66| 8B 5D 0C			mov		bx, [ebp+12]
 000000E0  66| 03 C3			add		ax, bx
 000000E3  71 06			jno		finished
 000000E5			overFlowDetected:
 000000E5  66| B9 0000			mov		cx, 0
 000000E9  66| 41			inc		cx				; if ecx = 1 mean overflow is detected""
 000000EB			finished:
 000000EB  5A				pop		edx
 000000EC  5B				pop		ebx
 000000ED  5D				pop		ebp
 000000EE  C2 0008			ret		8
 000000F1			addInput ENDP


				;----------------------CONVERT PROCEDURE -----------------
 000000F1			convertHexString PROC
				;	convert a value to string
				;		Input: a register
				;		Ouput: string
				;
				;--------------------------------------------------------
 000000F1  55				push	ebp
 000000F2  8B EC			mov		ebp, esp
 000000F4  50				push	eax
 000000F5  53				push	ebx
 000000F6  51				push	ecx
 000000F7  52				push	edx
 000000F8  56				push	esi
 000000F9  B9 00000004			mov		ecx, 4								; counter for loop			
 000000FE  66| BB 0010			mov		bx, 16								; divisor for HEX

 00000102			convertHEXtoString: 
 00000102  66| BA 0000			mov		dx, 0					
 00000106  66| F7 FB			idiv	bx								; Get remainder to store.
 00000109  66| 83 FA 09			cmp		dx, 9							; Compare if output = a number or a letter (A..F)
 0000010D  77 05			ja		extractLetter					; IF-ELSE control flows

 0000010F			  extractNumber:
 0000010F  80 C2 30			add		dl, 48d
 00000112  EB 03			jmp		AddtoString

 00000114			  extractLetter:							; a sub-routine of Convert Hex to String
 00000114  80 C2 37			add		dl, 55d						; add 48 to convert dec to letter in ANSCII table
							 
 00000117			  AddtoString:							; a sub-routine of Convert to Hex to String
 00000117  8B 75 08			mov		esi, [ebp + 8]
 0000011A  88 54 31 FF			mov		BYTE PTR[esi + ecx - 1], dl		; save a char (0..9 or A..F) into output array

 0000011E  E2 E2			loop convertHEXtoSTRING

 00000120			finished:
 00000120  5E				pop		esi
 00000121  5A				pop		edx
 00000122  59				pop		ecx
 00000123  5B				pop		ebx
 00000124  58				pop		eax
 00000125  5D				pop		ebp
 00000126  C2 0008			ret		8
 00000129			convertHexString ENDP


				END main


				COMMENT !
				===========CONSOLE OUTPUT====================

				Enter a first hex number:0000
				Enter a second hex number:0000
				The sum result is: 0000
				Would you like to continue? (y): y

				Enter a first hex number:7AAAA
				Enter a second hex number:FFFF
				The sum result is: AAA9
				Would you like to continue? (y): y

				Enter a first hex number:FFFF
				Enter a second hex number:FFFF
				The sum result is: FFFE
				Would you like to continue? (y): y

				Enter a first hex number:FFFF
				Enter a second hex number:1
				The sum result is: 0000
				Would you like to continue? (y): n

				!























				; STACK FRAME of GetInput
				;---------------------
				; address of inputstring	-----[ebp + 16]
				; address of n1				-----[ebp + 12]
				; address of n2 			-----[ebp + 8]
				; RET address				-----[ebp + 4]
				; ebp						-----[ebp]
				; value of eax				-----[ebp - 4]
				; value of ebx				-----[ebp - 8]
				; value of ecx				-----[ebp - 12]
				; value of edx				-----[ebp - 16]  <------- ESP points here

				; STACK FRAME of addInput
				;---------------------
				; value of n1				-----[ebp + 12]
				; value of n2 				-----[ebp + 8]
				; RET address				-----[ebp + 4]
				; ebp						-----[ebp]
				; value of eax				-----[ebp - 4]
				; value of ebx				-----[ebp - 8]
				; value of ecx				-----[ebp - 12]
				; value of edx				-----[ebp - 16]  <------- ESP points here


				; STACK FRAME of ConverHEXString
				;---------------------
				; address of output			-----[ebp + 12]
				; value of Sum				-----[ebp + 8]
				; RET address				-----[ebp + 4]
				; ebp						-----[ebp]
				; value of eax				-----[ebp - 4]
				; value of ebx				-----[ebp - 8]
				; value of ecx				-----[ebp - 12]
				; value of edx				-----[ebp - 16]  <------- ESP points here

				COMMENT !
				1.	Define 2 WORD size variables called num1 and num2 in the .data section. These are the 2 signed hexadecimal numbers. 
				2.	Write the getInput procedure.  This procedure:
					a.	Prompts the user and reads in 2 hexadecimal values, and stores them in num1 and num2.
					b.	Works with 3 parameters on the stack:  address of the input prompt string address, address of num1, address of num2.
					c.	You don't have to check for invalid input values. The input is guaranteed to be a hex value within 16 bits.

				3.	Write the add procedure. This procedure:
					a.	Adds the 2 values and check whether the sum is valid.
					b.	Works with 2 input parameters in registers:  the 2 input values to be added.
					c.	Stores the sum in a register, and indicates whether the sum is valid in another register.

				4.	Write the convert procedure. This procedure:
					a.	converts the sum into 4 characters and stores them in an output string .
					b.	Works with 2 input parameters on the stack:  the sum and the address of the output string.

				5.	Rewrite part of main so that it will do the following steps:
					a.	Call the getInput procedure, passing through the stack the 3 input arguments
							By the time the procedure returns, the user input should be in num1 and num2 variables.
					b.	Call the add procedure, passing through registers the 2 input arguments
							By the time the procedure returns, the sum should be in one register, and the boolean indicating the sum is valid or not should be in another register.
					c.	Check the boolean to see if the sum is valid
							- if not valid, print an error message then go to step d (same as in assignment 5)
							- if valid, call the convert procedure, passing through the stack the 2 input arguments
					  By the time the procedure returns, the output string should be completely filled and ready to print. 
				         main prints the output string with a text explanation (same as in assignment 5)
					d.	Ask the user whether to continue, accept  'y' or 'Y' to continue, end if any other character.


				The program output should be the same as with assignment 5. The only difference is that there is no invalid input number.


				Additional requirements
				-	Document your program to get full credit.
				-	The add procedure should use 16-bit registers only. 
				-	Use writeString to print the result. Using writeHex means an automatic 5 point deduction.
				-	Each procedure should receive input data through the stack or through register as specified.
				-	Except for main, the other 3 procedures cannot access data directly by using the variable names. 
				This includes names of strings that are printed.  All input data used by these procedures must be passed in.
				-	Each procedure should have its own stack frame. And the stack frame should be cleared out completely when the procedure call is completed.
				-	When ready to upload, make sure the filename is assignment7.asm
				!
Microsoft (R) Macro Assembler Version 14.00.24210.0	    11/23/16 00:18:41
Module 7 Exercis					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000C7 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000129 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
addInput . . . . . . . . . . . .	P Near	 000000D3 _TEXT	Length= 0000001E Public STDCALL
  overFlowDetected . . . . . . .	L Near	 000000E5 _TEXT	
  finished . . . . . . . . . . .	L Near	 000000EB _TEXT	
convertHexString . . . . . . . .	P Near	 000000F1 _TEXT	Length= 00000038 Public STDCALL
  convertHEXtoString . . . . . .	L Near	 00000102 _TEXT	
  extractNumber  . . . . . . . .	L Near	 0000010F _TEXT	
  extractLetter  . . . . . . . .	L Near	 00000114 _TEXT	
  AddtoString  . . . . . . . . .	L Near	 00000117 _TEXT	
  finished . . . . . . . . . . .	L Near	 00000120 _TEXT	
getInput . . . . . . . . . . . .	P Near	 0000009C _TEXT	Length= 00000037 Public STDCALL
  DISPLAY  . . . . . . . . . . .	L Near	 000000A8 _TEXT	
  FINISHED . . . . . . . . . . .	L Near	 000000CB _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000009C Public STDCALL
  mainLoop . . . . . . . . . . .	L Near	 00000000 _TEXT	
  ValidResult  . . . . . . . . .	L Near	 0000002E _TEXT	
  InvalidResult  . . . . . . . .	L Near	 00000054 _TEXT	
  AskContinue  . . . . . . . . .	L Near	 00000063 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
continue . . . . . . . . . . . .	Byte	 00000039 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
first_prompt . . . . . . . . . .	Byte	 00000004 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
invalid_result . . . . . . . . .	Byte	 00000074 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
num1 . . . . . . . . . . . . . .	Word	 00000000 _DATA	
num2 . . . . . . . . . . . . . .	Word	 00000002 _DATA	
prompt . . . . . . . . . . . . .	DWord	 000000BF _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
result . . . . . . . . . . . . .	Byte	 0000006F _DATA	
second_prompt  . . . . . . . . .	Byte	 0000001E _DATA	
sum_prompt . . . . . . . . . . .	Byte	 0000005B _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
